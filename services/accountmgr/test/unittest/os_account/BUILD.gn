# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/test.gni")
import("../../../../../services/accountmgr/os_account_service.gni")

module_output_path = "os_account/services/os_account"

config("os_account_control_file_manager_test_config") {
  include_dirs = [
    "${services_path}/accountmgr/include",
    "${services_path}/accountmgr/include/osaccount",
    "${common_path}/log/include",
    "${common_path}/perf_stat/include",
    "${innerkits_common}/include",
    "${innerkits_path}/include",
  ]
}

ohos_unittest("OsAccountControlFileManagerTest") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  module_out_path = module_output_path

  sources = [ "os_account_control_file_manager_test.cpp" ]
  configs = [
    ":os_account_control_file_manager_test_config",
    "${services_path}/accountmgr/test:accountmgr_test_config",
  ]
  deps = [
    "${common_path}:libaccount_common",
    "${os_account_innerkits_native_path}:os_account_innerkits",
    "${services_path}/accountmgr:accountmgr",
  ]

  external_deps = [
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "json:nlohmann_json_static",
    "kv_store:distributeddata_inner",
  ]
  cflags_cc = []
  if (os_account_distributed_feature) {
    cflags_cc += [ "-DENABLE_FILE_WATCHER" ]
  }
  part_name = "os_account"
}

ohos_unittest("OsAccountFileManagerMultipleThreadTest") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  module_out_path = module_output_path

  sources = [ "os_account_file_manager_multiple_thread_test.cpp" ]
  configs = [
    ":os_account_control_file_manager_test_config",
    "${services_path}/accountmgr/test:accountmgr_test_config",
  ]
  deps = [
    "${common_path}:libaccount_common",
    "${os_account_innerkits_native_path}:os_account_innerkits",
    "${services_path}/accountmgr:accountmgr",
  ]

  external_deps = [
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "json:nlohmann_json_static",
    "kv_store:distributeddata_inner",
  ]
  part_name = "os_account"
}

config("os_account_data_storage_test_config") {
  include_dirs = [
    "${services_path}/accountmgr/test/mock/os_account",
    "${services_path}/accountmgr/include",
    "${services_path}/accountmgr/include/osaccount",
    "${services_path}/accountmgr/include/ability_manager_adapter",
    "${common_path}/log/include",
    "${common_path}/perf_stat/include",
    "${innerkits_common}/include",
    "${innerkits_path}/include",
    "${services_path}/accountmgr/test/unittest/os_account/mock",
  ]
}

ohos_unittest("OsAccountDataStorageTest") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  module_out_path = module_output_path

  sources = [ "os_account_data_storage_test.cpp" ]
  configs = [
    ":os_account_data_storage_test_config",
    "${services_path}/accountmgr/test:accountmgr_test_config",
  ]

  deps = [
    "${common_path}:libaccount_common",
    "${os_account_innerkits_native_path}:os_account_innerkits",
    "${services_path}/accountmgr:accountmgr",
  ]

  external_deps = [
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "json:nlohmann_json_static",
    "kv_store:distributeddata_inner",
  ]
  part_name = "os_account"
}

ohos_unittest("os_account_domain_account_callback_test") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  module_out_path = module_output_path

  sources = [
    "${services_path}/accountmgr/src/domain_account/domain_account_plugin_death_recipient.cpp",
    "${services_path}/accountmgr/src/domain_account/domain_has_domain_info_callback.cpp",
    "${services_path}/accountmgr/src/domain_account/inner_domain_account_manager.cpp",
    "${services_path}/accountmgr/src/domain_account/status_listener_death_recipient.cpp",
    "${services_path}/accountmgr/src/domain_account/status_listener_manager.cpp",
    "${services_path}/accountmgr/src/osaccount/os_account_domain_account_callback.cpp",
    "os_account_domain_account_callback_test.cpp",
  ]
  configs = [
    "${app_account_services_path}/test/mock:ability_manager_config",
    ":os_account_data_storage_test_config",
    "${services_path}/accountmgr/test:accountmgr_test_config",
  ]

  deps = [
    "${account_iam_framework_path}:account_iam_innerkits",
    "${common_path}:libaccount_common",
    "${domain_account_framework_path}:domain_account_innerkits",
    "${os_account_innerkits_native_path}:os_account_innerkits",
    "${services_path}/accountmgr:accountmgr",
  ]

  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "kv_store:distributeddata_inner",
  ]

  if (has_user_auth_part) {
    cflags_cc = [ "-DHAS_USER_AUTH_PART" ]
    external_deps += [ "user_auth_framework:userauth_client" ]
  }
  if (os_account_support_domain_accounts) {
    cflags_cc += [ "-DSUPPORT_DOMAIN_ACCOUNTS" ]
  }
  part_name = "os_account"
}

config("os_account_subscribe_death_recipient_test_config") {
  include_dirs = [
    "${services_path}/accountmgr/test/mock/os_account",
    "${services_path}/accountmgr/include",
    "${services_path}/accountmgr/include/osaccount",
    "${services_path}/accountmgr/include/ability_manager_adapter",
    "${common_path}/log/include",
    "${common_path}/perf_stat/include",
    "${innerkits_common}/include",
    "${innerkits_path}/include",
    "${services_path}/accountmgr/test/unittest/os_account/mock",
  ]
}

ohos_unittest("OsAccountSubscribeDeathRecipientTest") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  module_out_path = module_output_path

  sources = [
    "${services_path}/accountmgr/test/mock/src/mock_account_mgr_service.cpp",
    "os_account_subscribe_death_recipient_test.cpp",
  ]
  configs = [
    ":os_account_subscribe_death_recipient_test_config",
    "${services_path}/accountmgr/test:accountmgr_test_config",
    "${services_path}/accountmgr/:ability_manager_config",
  ]

  deps = [
    "${common_path}:libaccount_common",
    "${os_account_innerkits_native_path}:os_account_innerkits",
    "${services_path}/accountmgr:accountmgr",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:wantagent_innerkits",
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "samgr:samgr_proxy",
    "user_auth_framework:userauth_client",
  ]
  part_name = "os_account"
}

config("os_account_amgr_test_config") {
  include_dirs = [
    "${services_path}/accountmgr/include",
    "${services_path}/accountmgr/include/osaccount",
    "${services_path}/accountmgr/include/ability_manager_adapter",
    "${common_path}/log/include",
    "${common_path}/perf_stat/include",
    "${innerkits_common}/include",
    "${innerkits_path}/include",
    "${services_path}/accountmgr/test/unittest/os_account/mock",
  ]
}

ohos_unittest("OsAccountInnerAccmgrCovTest") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  cflags_cc = []
  module_out_path = module_output_path

  sources = [
    "os_account_inner_account_mgr_cov.cpp",
    "os_account_service_test.cpp",
  ]
  configs = [
    ":os_account_amgr_test_config",
    "${services_path}/accountmgr/test:accountmgr_test_config",
    "${services_path}/accountmgr/:ability_manager_config",
  ]

  deps = [
    "${common_path}:libaccount_common",
    "${os_account_innerkits_native_path}:os_account_innerkits",
    "${services_path}/accountmgr:accountmgr",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokensetproc_shared",
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "kv_store:distributeddata_inner",
    "samgr:samgr_proxy",
    "user_auth_framework:userauth_client",
  ]
  if (has_ces_part) {
    cflags_cc += [ "-DHAS_CES_PART" ]
    external_deps += [ "common_event_service:cesfwk_innerkits" ]
  }
  part_name = "os_account"
}

config("os_account_amgr_mock_config") {
  include_dirs = [
    "${services_path}/accountmgr/include",
    "${services_path}/accountmgr/include/osaccount",
    "${services_path}/accountmgr/include/ability_manager_adapter",
    "${services_path}/accountmgr/test/unittest/os_account/mock",
    "${common_path}/log/include",
    "${common_path}/perf_stat/include",
    "${innerkits_common}/include",
    "${innerkits_path}/include",
  ]
}

ohos_unittest("OsAccountInnerAccmgrMockTest") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${os_account_path}/cfi_blocklist.txt"
  }

  module_out_path = module_output_path

  sources = [
    "${services_path}/accountmgr/test/mock/os_account/os_account_interface.cpp",
    "os_account_inner_account_mgr_mock.cpp",
  ]
  configs = [
    ":os_account_amgr_mock_config",
    "${services_path}/accountmgr/test:accountmgr_test_config",
    "${services_path}/accountmgr/:ability_manager_config",
  ]

  deps = [
    "${common_path}:libaccount_common",
    "${os_account_innerkits_native_path}:os_account_innerkits",
    "${services_path}/accountmgr:accountmgr",
  ]

  cflags_cc = [ "-DBUNDLE_ADAPTER_MOCK" ]

  if (os_account_enable_multiple_os_accounts || use_clang_coverage) {
    cflags_cc += [ "-DENABLE_MULTIPLE_OS_ACCOUNTS" ]
  }

  if (os_account_support_domain_accounts) {
    cflags_cc += [ "-DSUPPORT_DOMAIN_ACCOUNTS" ]
  }

  external_deps = [
    "ability_base:want",
    "ability_runtime:wantagent_innerkits",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "kv_store:distributeddata_inner",
    "samgr:samgr_proxy",
    "user_auth_framework:userauth_client",
  ]
  part_name = "os_account"
}

ohos_unittest("OsAccountInnerAccmgrBundleAdapterMockTest") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${os_account_path}/cfi_blocklist.txt"
  }

  module_out_path = module_output_path
  include_dirs = [
    "${app_account_innerkits_native_path}/include",
    "${os_account_dfx_path}/hidumper_adapter",
    "${services_path}/accountmgr/include/bundle_manager_adapter",
    "${services_path}/accountmgr/include/ability_manager_adapter",
    "${services_path}/accountmgr/include",
    "${os_account_dfx_path}/hitrace_adapter",
    "${services_path}/accountmgr/include/account_iam",
    "${services_path}/accountmgr/include/appaccount",
    "${services_path}/accountmgr/include/domain_account",
    "${services_path}/accountmgr/include/osaccount",
    "${bundle_framework_path}/interfaces/inner_api/appexecfwk_core/include",
    "${os_account_path}/interfaces/innerkits/ohosaccount/native/include/",
  ]
  sources = [
    "${app_account_services_path}/test/mock/common/ability_manager_adapter_mock.cpp",
    "${app_account_services_path}/test/mock/common/bundle_manager_adapter.cpp",
    "${common_path}/log/src/account_log_wrapper.cpp",
    "${innerkits_native_path}/src/account_info_parcel.cpp",
    "${innerkits_native_path}/src/account_proxy.cpp",
    "${innerkits_native_path}/src/ohos_account_kits.cpp",
    "${innerkits_native_path}/src/ohos_account_kits_impl.cpp",
    "${os_account_dfx_path}/hidumper_adapter/account_dump_helper.cpp",
    "${os_account_dfx_path}/hitrace_adapter/hitrace_adapter.cpp",
    "${services_path}/accountmgr/src/account_iam/account_iam_callback.cpp",
    "${services_path}/accountmgr/src/account_iam/account_iam_mgr_stub.cpp",
    "${services_path}/accountmgr/src/account_iam/account_iam_service.cpp",
    "${services_path}/accountmgr/src/account_iam/inner_account_iam_manager.cpp",
    "${services_path}/accountmgr/src/appaccount/app_account_control_manager.cpp",
    "${services_path}/accountmgr/test/mock/os_account/os_account_interface.cpp",
    "${services_path}/accountmgr/test/unittest/os_account/mock/mock_os_account_musl.cpp",
    "os_account_inner_account_mgr_mock.cpp",
  ]
  sources += account_service_sources
  sources -=
      [ "${services_path}/accountmgr/src/osaccount/os_account_interface.cpp" ]
  configs = [
    ":os_account_amgr_mock_config",
    "${services_path}/accountmgr/test:accountmgr_test_config",
    "${services_path}/accountmgr/:ability_manager_config",
  ]

  deps = [
    "${account_iam_framework_path}:account_iam_innerkits",
    "${common_path}:libaccount_common",
    "${domain_account_framework_path}:domain_account_innerkits",
    "${innerkits_native_path}:libaccountkits",
    "${os_account_innerkits_native_path}:os_account_innerkits",
  ]

  use_exceptions = true

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_runtime:ability_manager",
    "ability_runtime:app_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "mbedtls:mbedtls_shared",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
  cflags_cc = []
  if (os_account_distributed_feature) {
    cflags_cc += [ "-DENABLE_FILE_WATCHER" ]
    sources +=
        [ "${services_path}/accountmgr/src/account_file_watcher_manager.cpp" ]
    if (has_huks_part) {
      external_deps += [ "huks:libhukssdk" ]
      cflags_cc += [ "-DHAS_HUKS_PART" ]
    }
  }
  if (has_user_auth_part) {
    cflags_cc += [ "-DHAS_USER_AUTH_PART" ]
    external_deps += [ "user_auth_framework:userauth_client" ]
  }
  if (has_ces_part) {
    cflags_cc += [ "-DHAS_CES_PART" ]
    external_deps += [ "common_event_service:cesfwk_innerkits" ]
  }
  if (has_kv_store_part) {
    external_deps += [ "kv_store:distributeddata_inner" ]
  }
  if (os_account_enable_multiple_os_accounts || use_clang_coverage) {
    cflags_cc += [ "-DENABLE_MULTIPLE_OS_ACCOUNTS" ]
  }
  cflags_cc += [
    "-DBUNDLE_ADAPTER_MOCK",
    "-DACCOUNT_TEST",
  ]

  if (os_account_support_domain_accounts) {
    cflags_cc += [ "-DSUPPORT_DOMAIN_ACCOUNTS" ]
  }
  part_name = "os_account"
}

ohos_unittest("OsAccountInnerAccmgrPluginMockTest") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  cflags_cc = []
  module_out_path = module_output_path

  include_dirs = [
    "${app_account_innerkits_native_path}/include",
    "${os_account_dfx_path}/hidumper_adapter",
    "${services_path}/accountmgr/include/bundle_manager_adapter",
    "${services_path}/accountmgr/include/ability_manager_adapter",
    "${services_path}/accountmgr/include",
    "${os_account_dfx_path}/hitrace_adapter",
    "${services_path}/accountmgr/include/account_iam",
    "${services_path}/accountmgr/include/appaccount",
    "${services_path}/accountmgr/include/domain_account",
    "${services_path}/accountmgr/include/osaccount",
    "${bundle_framework_path}/interfaces/inner_api/appexecfwk_core/include",
    "${os_account_path}/interfaces/innerkits/ohosaccount/native/include/",
    "${account_iam_interfaces_native_path}/include",
  ]
  sources = [
    "${common_path}/log/src/account_log_wrapper.cpp",
    "${innerkits_native_path}/src/account_info_parcel.cpp",
    "${innerkits_native_path}/src/account_proxy.cpp",
    "${innerkits_native_path}/src/ohos_account_kits.cpp",
    "${innerkits_native_path}/src/ohos_account_kits_impl.cpp",
    "${os_account_dfx_path}/hidumper_adapter/account_dump_helper.cpp",
    "${os_account_dfx_path}/hitrace_adapter/hitrace_adapter.cpp",
    "${services_path}/accountmgr/src/account_iam/account_iam_callback.cpp",
    "${services_path}/accountmgr/src/account_iam/account_iam_mgr_stub.cpp",
    "${services_path}/accountmgr/src/account_iam/account_iam_service.cpp",
    "${services_path}/accountmgr/src/account_iam/inner_account_iam_manager.cpp",
    "${services_path}/accountmgr/src/appaccount/app_account_control_manager.cpp",
    "${services_path}/accountmgr/test/mock/os_account/os_account_interface.cpp",
    "${services_path}/accountmgr/test/mock/os_account/os_account_plugin_manager.cpp",
    "os_account_inner_account_mgr_plugin_mock.cpp",
  ]
  sources += account_service_sources
  sources -=
      [ "${services_path}/accountmgr/src/osaccount/os_account_interface.cpp" ]
  if (os_account_enable_multiple_os_accounts) {
    sources -= [
      "${services_path}/accountmgr/src/osaccount/os_account_plugin_manager.cpp",
    ]
  }
  configs = [
    ":os_account_amgr_test_config",
    "${services_path}/accountmgr/test:accountmgr_test_config",
    "${services_path}/accountmgr/:ability_manager_config",
  ]

  deps = [
    "${account_iam_framework_path}:account_iam_innerkits",
    "${common_path}:libaccount_common",
    "${domain_account_framework_path}:domain_account_innerkits",
    "${innerkits_native_path}:libaccountkits",
    "${os_account_innerkits_native_path}:os_account_innerkits",
  ]

  use_exceptions = true

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_runtime:ability_manager",
    "ability_runtime:app_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "mbedtls:mbedtls_shared",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
  cflags_cc = []
  if (os_account_distributed_feature) {
    cflags_cc += [ "-DENABLE_FILE_WATCHER" ]
    sources +=
        [ "${services_path}/accountmgr/src/account_file_watcher_manager.cpp" ]
    if (has_huks_part) {
      external_deps += [ "huks:libhukssdk" ]
      cflags_cc += [ "-DHAS_HUKS_PART" ]
    }
  }
  if (has_user_auth_part) {
    cflags_cc += [ "-DHAS_USER_AUTH_PART" ]
    external_deps += [ "user_auth_framework:userauth_client" ]
  }
  if (has_ces_part) {
    cflags_cc += [ "-DHAS_CES_PART" ]
    external_deps += [ "common_event_service:cesfwk_innerkits" ]
  }
  if (has_kv_store_part) {
    external_deps += [ "kv_store:distributeddata_inner" ]
  }
  if (os_account_enable_multiple_os_accounts || use_clang_coverage) {
    cflags_cc += [ "-DENABLE_MULTIPLE_OS_ACCOUNTS" ]
  }
  cflags_cc += [
    "-DBUNDLE_ADAPTER_MOCK",
    "-DACCOUNT_TEST",
  ]
  if (os_account_support_domain_accounts) {
    cflags_cc += [ "-DSUPPORT_DOMAIN_ACCOUNTS" ]
  }
  part_name = "os_account"
}

ohos_unittest("OsAccountEventManagerMultipleThreadTest") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${os_account_path}/cfi_blocklist.txt"
  }

  module_out_path = module_output_path
  include_dirs = [
    "${app_account_innerkits_native_path}/include",
    "${os_account_dfx_path}/hidumper_adapter",
    "${services_path}/accountmgr/include/bundle_manager_adapter",
    "${services_path}/accountmgr/include/ability_manager_adapter",
    "${services_path}/accountmgr/include",
    "${os_account_dfx_path}/hitrace_adapter",
    "${services_path}/accountmgr/include/account_iam",
    "${services_path}/accountmgr/include/appaccount",
    "${services_path}/accountmgr/include/domain_account",
    "${services_path}/accountmgr/include/osaccount",
    "${bundle_framework_path}/interfaces/inner_api/appexecfwk_core/include",
    "${os_account_path}/interfaces/innerkits/ohosaccount/native/include/",
  ]
  sources = [
    "${app_account_services_path}/test/mock/common/ability_manager_adapter_mock.cpp",
    "${app_account_services_path}/test/mock/common/bundle_manager_adapter.cpp",
    "${common_path}/log/src/account_log_wrapper.cpp",
    "${innerkits_native_path}/src/account_info_parcel.cpp",
    "${innerkits_native_path}/src/account_proxy.cpp",
    "${innerkits_native_path}/src/ohos_account_kits.cpp",
    "${innerkits_native_path}/src/ohos_account_kits_impl.cpp",
    "${os_account_dfx_path}/hidumper_adapter/account_dump_helper.cpp",
    "${os_account_dfx_path}/hitrace_adapter/hitrace_adapter.cpp",
    "${services_path}/accountmgr/src/account_iam/account_iam_callback.cpp",
    "${services_path}/accountmgr/src/account_iam/account_iam_mgr_stub.cpp",
    "${services_path}/accountmgr/src/account_iam/account_iam_service.cpp",
    "${services_path}/accountmgr/src/account_iam/inner_account_iam_manager.cpp",
    "${services_path}/accountmgr/src/appaccount/app_account_control_manager.cpp",
    "os_account_event_manager_multiple_thread_test.cpp",
  ]
  sources += account_service_sources
  configs = [
    ":os_account_amgr_mock_config",
    "${services_path}/accountmgr/test:accountmgr_test_config",
    "${services_path}/accountmgr/:ability_manager_config",
  ]

  deps = [
    "${account_iam_framework_path}:account_iam_innerkits",
    "${common_path}:libaccount_common",
    "${domain_account_framework_path}:domain_account_innerkits",
    "${innerkits_native_path}:libaccountkits",
    "${os_account_innerkits_native_path}:os_account_innerkits",
  ]

  use_exceptions = true

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_runtime:ability_manager",
    "ability_runtime:app_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "mbedtls:mbedtls_shared",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
  cflags_cc = []
  if (os_account_distributed_feature) {
    cflags_cc += [ "-DENABLE_FILE_WATCHER" ]
    sources +=
        [ "${services_path}/accountmgr/src/account_file_watcher_manager.cpp" ]
    if (has_huks_part) {
      external_deps += [ "huks:libhukssdk" ]
      cflags_cc += [ "-DHAS_HUKS_PART" ]
    }
  }
  if (has_user_auth_part) {
    cflags_cc += [ "-DHAS_USER_AUTH_PART" ]
    external_deps += [ "user_auth_framework:userauth_client" ]
  }
  if (has_ces_part) {
    cflags_cc += [ "-DHAS_CES_PART" ]
    external_deps += [ "common_event_service:cesfwk_innerkits" ]
  }
  if (has_kv_store_part) {
    external_deps += [ "kv_store:distributeddata_inner" ]
  }
  cflags_cc += [ "-DACCOUNT_TEST" ]
  cflags_cc += [ "-DBUNDLE_ADAPTER_MOCK" ]
  if (os_account_enable_multiple_os_accounts || use_clang_coverage) {
    cflags_cc += [ "-DENABLE_MULTIPLE_OS_ACCOUNTS" ]
  }
  if (os_account_support_domain_accounts) {
    cflags_cc += [ "-DSUPPORT_DOMAIN_ACCOUNTS" ]
  }
  part_name = "os_account"
}

group("unittest") {
  testonly = true

  deps = [
    ":OsAccountControlFileManagerTest",
    ":OsAccountEventManagerMultipleThreadTest",
    ":OsAccountFileManagerMultipleThreadTest",
    ":OsAccountInnerAccmgrBundleAdapterMockTest",
    ":OsAccountInnerAccmgrCovTest",
    ":OsAccountInnerAccmgrPluginMockTest",
    ":OsAccountSubscribeDeathRecipientTest",
  ]

  if (os_account_support_domain_accounts) {
    deps += [ ":os_account_domain_account_callback_test" ]
  }

  if (has_kv_store_part && os_account_distributed_feature) {
    deps += [ ":OsAccountDataStorageTest" ]
  }
}
