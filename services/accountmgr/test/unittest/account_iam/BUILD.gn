# Copyright (c) 2022-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/account/os_account/services/accountmgr/os_account_service.gni")
import("//build/test.gni")
import("../../../../../os_account.gni")

module_output_path = "os_account/account_iam"

config("account_iam_native_config_unittest") {
  visibility = [ ":*" ]

  include_dirs = [
    "include",
    "${services_path}/accountmgr/include/account_iam",
  ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  defines = [
    "ACCOUNT_LOG_TAG = \"AccountIAMUTestFwk\"",
    "LOG_DOMAIN = 0xD001B00",
  ]
}

ohos_unittest("account_iam_service_test") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${os_account_path}/cfi_blocklist.txt"
  }

  module_out_path = module_output_path

  sources = [ "account_iam_service_test.cpp" ]

  configs = [ ":account_iam_native_config_unittest" ]

  deps = [
    "${account_iam_framework_path}:account_iam_innerkits",
    "${account_test_common}:account_test_common_source_set",
    "${common_path}:libaccount_common",
    "${os_account_innerkits_native_path}:os_account_innerkits",
    "${services_path}/accountmgr:accountmgr",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libtokensetproc_shared",
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_single",
  ]

  cflags_cc = []
  if (has_pin_auth_part) {
    cflags_cc += [ "-DHAS_PIN_AUTH_PART" ]
    external_deps += [ "pin_auth:pinauth_framework" ]
  }

  if (has_user_auth_part) {
    cflags_cc += [ "-DHAS_USER_AUTH_PART" ]
    external_deps += [ "user_auth_framework:userauth_client" ]
  }
}

ohos_unittest("account_iam_stub_test") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${os_account_path}/cfi_blocklist.txt"
  }

  module_out_path = module_output_path

  sources = [
    "account_iam_stub_test.cpp",
  ]

  configs = [ ":account_iam_native_config_unittest" ]

  deps = [
    "${account_iam_framework_path}:account_iam_stub",
    "${account_iam_framework_path}:account_iam_innerkits",
    "${account_test_common}:account_test_common_source_set",
    "${common_path}:libaccount_common",
    "${os_account_innerkits_native_path}:os_account_innerkits",
    "${services_path}/accountmgr:accountmgr",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libtokensetproc_shared",
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_single",
  ]

  cflags_cc = []
  if (has_pin_auth_part) {
    cflags_cc += [ "-DHAS_PIN_AUTH_PART" ]
    external_deps += [ "pin_auth:pinauth_framework" ]
  }

  if (has_user_auth_part) {
    cflags_cc += [ "-DHAS_USER_AUTH_PART" ]
    external_deps += [ "user_auth_framework:userauth_client" ]
  }
}

ohos_unittest("account_iam_callback_test") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${os_account_path}/cfi_blocklist.txt"
  }

  module_out_path = module_output_path

  sources = [
    "${domain_account_framework_path}/test/moduletest/src/mock_domain_plugin.cpp",
    "account_iam_callback_test.cpp",
  ]

  configs = [ ":account_iam_native_config_unittest" ]

  deps = [
    "${account_iam_framework_path}:account_iam_innerkits",
    "${account_test_common}:account_test_common_source_set",
    "${common_path}:libaccount_common",
    "${domain_account_framework_path}:domain_account_innerkits",
    "${os_account_innerkits_native_path}:os_account_innerkits",
    "${services_path}/accountmgr:accountmgr",
  ]

  include_dirs = [
    "${os_account_path}/frameworks/domain_account/test/moduletest/include/",
    "${os_account_interfaces_native_path}/include/",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokensetproc_shared",
    "cJSON:cjson",
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "ipc:ipc_single",
  ]

  cflags_cc = []
  if (has_pin_auth_part) {
    cflags_cc += [ "-DHAS_PIN_AUTH_PART" ]
    external_deps += [ "pin_auth:pinauth_framework" ]
  }

  if (has_user_auth_part) {
    cflags_cc += [ "-DHAS_USER_AUTH_PART" ]
    external_deps += [ "user_auth_framework:userauth_client" ]
  }

  if (os_account_support_domain_accounts) {
    cflags_cc += [ "-DSUPPORT_DOMAIN_ACCOUNTS" ]
  }

  if (has_storage_service_part) {
    cflags_cc += [ "-DHAS_STORAGE_PART" ]
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
  }

  if (os_account_enable_account_1) {
    cflags_cc += [ "-DENABLE_U1_ACCOUNT" ]
  }

  if (os_account_support_lock_os_account) {
    cflags_cc += [ "-DSUPPORT_LOCK_OS_ACCOUNT" ]
  }

  if (os_account_support_domain_accounts) {
    cflags_cc += [ "-DSUPPORT_DOMAIN_ACCOUNTS" ]
  }
}

ohos_unittest("account_iam_manager_test") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${os_account_path}/cfi_blocklist.txt"
  }

  module_out_path = module_output_path

  sources = [ "account_iam_manager_test.cpp" ]

  configs = [
    ":account_iam_native_config_unittest",
    "${services_path}/accountmgr:account_iam_config",
  ]

  deps = [
    "${account_iam_framework_path}:account_iam_innerkits",
    "${account_test_common}:account_test_common_source_set",
    "${common_path}:libaccount_common",
    "${os_account_innerkits_native_path}:os_account_innerkits",
    "${services_path}/accountmgr:accountmgr",
  ]

  cflags_cc = []
  if (use_libfuzzer) {
    cflags_cc += [ "-DFUZZ_TEST" ]
  }

  if (has_user_auth_part) {
    cflags_cc += [ "-DHAS_USER_AUTH_PART" ]
  }

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokensetproc_shared",
    "cJSON:cjson",
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "user_auth_framework:userauth_client",
  ]

  if (has_storage_service_part) {
    cflags_cc += [ "-DHAS_STORAGE_PART" ]
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
  }

  if (has_pin_auth_part) {
    cflags_cc += [ "-DHAS_PIN_AUTH_PART" ]
    external_deps += [ "pin_auth:pinauth_framework" ]
  }

  if (os_account_enable_account_1) {
    cflags_cc += [ "-DENABLE_U1_ACCOUNT" ]
  }

  if (os_account_support_lock_os_account) {
    cflags_cc += [ "-DSUPPORT_LOCK_OS_ACCOUNT" ]
  }
}

ohos_unittest("account_inner_iam_manager_mock_source_file_test") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${os_account_path}/cfi_blocklist.txt"
  }
  use_exceptions = true

  module_out_path = module_output_path

  sources = [
    "${app_account_services_path}/test/mock/common/ability_manager_adapter_mock.cpp",
    "${app_account_services_path}/test/mock/common/bundle_manager_adapter.cpp",
    "${innerkits_native_path}/src/account_info.cpp",
    "${os_account_dfx_path}/hidumper_adapter/account_dump_helper.cpp",
    "${os_account_dfx_path}/hitrace_adapter/hitrace_adapter.cpp",
    "${services_path}/accountmgr/src/account_iam/account_iam_callback.cpp",
    "${services_path}/accountmgr/src/account_iam/account_iam_service.cpp",
    "${services_path}/accountmgr/src/account_iam/inner_account_iam_manager.cpp",
    "account_inner_iam_manager_mock_source_file_test.cpp",
  ]
  sources += account_service_sources
  include_dirs = [
    "${app_account_innerkits_native_path}/include",
    "${os_account_dfx_path}/hidumper_adapter",
    "${os_account_dfx_path}/hitrace_adapter",
    "${services_path}/accountmgr/include/bundle_manager_adapter",
    "${services_path}/accountmgr/include/ability_manager_adapter",
    "${services_path}/accountmgr/include",
    "${os_account_interfaces_native_path}/include/",
    "${services_path}/accountmgr/include/account_iam",
    "${services_path}/accountmgr/include/appaccount",
    "${services_path}/accountmgr/include/domain_account",
    "${services_path}/accountmgr/include/osaccount",
    "${os_account_path}/interfaces/innerkits/ohosaccount/native/include/",
    "${account_test_common}/include",
    "${os_account_dfx_path}/data_dfx",
    "${services_path}/accountmgr/include/common/database/kvstore",
    "${services_path}/accountmgr/include/common/database",
  ]

  sources += [
    "${account_test_common}/src/account_test_common.cpp",
    "${common_path}/account_error/src/account_error_no.cpp",
    "${common_path}/file_operator/src/account_file_operator.cpp",
    "${common_path}/log/src/account_log_wrapper.cpp",
    "${common_path}/perf_stat/src/perf_stat.cpp",
    "${common_path}/utils/src/account_permission_manager.cpp",
    "${common_path}/utils/src/account_timeout_task.cpp",
    "${common_path}/utils/src/memory_guard.cpp",
    "${innerkits_native_path}/src/distributed_account_subscribe_callback.cpp",
    "${os_account_dfx_path}/data_dfx/data_size_report_adapter.cpp",
    "${os_account_dfx_path}/hisysevent_adapter/account_hisysevent_adapter.cpp",
    "${services_path}/accountmgr/src/common/database/kvstore/kvstore_adapter_impl.cpp",
  ]

  configs = [
    ":account_iam_native_config_unittest",
    "${common_path}:account_common_config",
    "${services_path}/accountmgr:account_iam_config",
    "${app_account_innerkits_native_path}:app_account_interface_public_config",
  ]

  deps = [
    "${account_iam_framework_path}:account_iam_stub",
    "${account_iam_framework_path}:account_iam_innerkits",
    "${common_path}:libaccount_common",
    "${domain_account_framework_path}:domain_account_innerkits",
    "${domain_account_framework_path}:domain_account_stub",
    "${innerkits_native_path}:account_stub",
    "${os_account_innerkits_native_path}:os_account_event_proxy",
    "${os_account_innerkits_native_path}:os_account_innerkits",
    "${os_account_innerkits_native_path}:os_account_state_reply_callback_proxy",
    "${os_account_innerkits_native_path}:os_account_state_reply_callback_stub",
    "${os_account_innerkits_native_path}:os_account_stub",
  ]

  cflags_cc = [ "-DACCOUNT_TEST" ]
  if (has_user_auth_part) {
    cflags_cc += [ "-DHAS_USER_AUTH_PART" ]
  }
  if (use_libfuzzer) {
    cflags_cc += [ "-DFUZZ_TEST" ]
  }

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokenid_sdk",
    "access_token:libtokensetproc_shared",
    "cJSON:cjson",
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "openssl:libcrypto_shared",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "user_auth_framework:userauth_client",
  ]

  if (has_storage_service_part) {
    cflags_cc += [ "-DHAS_STORAGE_PART" ]
    external_deps += [ "storage_service:storage_manager_sa_proxy" ]
  }

  if (has_pin_auth_part) {
    cflags_cc += [ "-DHAS_PIN_AUTH_PART" ]
    external_deps += [ "pin_auth:pinauth_framework" ]
  }

  if (has_kv_store_part) {
    external_deps += [ "kv_store:distributeddata_inner" ]
  }

  if (os_account_support_domain_accounts) {
    cflags_cc += [
      "-DSUPPORT_DOMAIN_ACCOUNTS",
      "-DDOMAIN_ACCOUNT_TEST_CASE",
    ]
    deps += [ "${domain_account_framework_path}:domain_account_plugin_proxy" ]
  }

  if (os_account_support_lock_os_account) {
    cflags_cc += [ "-DSUPPORT_LOCK_OS_ACCOUNT" ]
  }

  if (has_ces_part) {
    cflags_cc += [ "-DHAS_CES_PART" ]
    external_deps += [ "common_event_service:cesfwk_innerkits" ]
  }
}

group("unittest") {
  testonly = true
  deps = []
  if (!use_libfuzzer) {
    deps += [
      ":account_iam_callback_test",
      ":account_iam_manager_test",
      ":account_iam_service_test",
      ":account_iam_stub_test",
      ":account_inner_iam_manager_mock_source_file_test",
    ]
  }
}
