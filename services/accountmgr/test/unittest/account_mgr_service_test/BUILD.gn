# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//base/account/os_account/os_account.gni")
import("//build/ohos.gni")
import("//build/test.gni")

module_output_path = "os_account/accountmgrservice"

config("ability_manager_config") {
  include_dirs = [
    "${ability_runtime_path}/interfaces/inner_api/ability_manager/include",
    "${ability_runtime_path}/ability_base/interfaces/inner_api/want/include",
    "${ability_runtime_path}/services/abilitymgr/include",
    "${ability_runtime_path}/services/common/include",
  ]
}

ability_manager_sources = [
  "${ability_runtime_path}/services/abilitymgr/src/stop_user_callback_stub.cpp",
  "${services_path}/accountmgr/src/ability_manager_adapter/ability_manager_adapter.cpp",
]

config("bundle_manager_config") {
  include_dirs = [
    "${services_path}/accountmgr/include/bundle_manager_adapter",
    "${bundle_framework_path}/common/log/include",
    "${bundle_framework_path}/interfaces/inner_api/appexecfwk_core/include/bundlemgr",
  ]
}

bundle_manager_sources = [
  "${bundle_framework_path}/common/log/src/app_log_wrapper.cpp",
  "${services_path}/accountmgr/src/bundle_manager_adapter/bundle_manager_adapter.cpp",
  "${services_path}/accountmgr/src/bundle_manager_adapter/bundle_manager_adapter_proxy.cpp",
  "${services_path}/accountmgr/src/bundle_manager_adapter/bundle_user_manager_adapter_proxy.cpp",
]

ohos_unittest("account_mgr_test") {
  module_out_path = module_output_path
  cflags_cc = []

  sources = [
    "account_dump_helper_test.cpp",
    "account_mgr_service_test.cpp",
    "account_state_machine_test.cpp",
  ]

  sources += ability_manager_sources
  sources += bundle_manager_sources

  configs = [
    ":ability_manager_config",
    ":bundle_manager_config",
    "${services_path}/accountmgr:accountmgr_config",
    "${services_path}/accountmgr/test:accountmgr_test_config",
  ]
  deps = [
    "${app_account_innerkits_native_path}:app_account_innerkits",
    "${app_account_services_path}/src/appaccount:app_account_service_core",
    "${common_path}:libaccount_common",
    "${innerkits_native_path}:libaccountkits",
    "${os_account_core_path}:os_account_core",
    "${os_account_innerkits_native_path}:os_account_innerkits",
    "${services_path}/accountmgr:accountmgr",
    "//third_party/googletest:gtest_main",
    "//third_party/mbedtls:mbedtls",
  ]

  if (has_user_idm_part) {
    cflags_cc += [ "-DHAS_USER_IDM_PART" ]
    deps += [ "//base/useriam/user_auth_framework/frameworks/native/client:userauth_client" ]
  }

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_base",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "kv_store:distributeddata_inner",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
  ]

  if (has_ces_part) {
    cflags_cc += [ "-DHAS_CES_PART" ]
    external_deps += [ "common_event_service:cesfwk_innerkits" ]
  }

  if (has_hiviewdfx_hisysevent_part) {
    cflags_cc += [ "-DHAS_HISYSEVENT_PART" ]
    external_deps += [ "hisysevent_native:libhisysevent" ]
  }

  external_deps += [ "hitrace_native:hitrace_meter" ]

  part_name = "os_account"
}

group("unittest") {
  testonly = true

  deps = [ ":account_mgr_test" ]
}
