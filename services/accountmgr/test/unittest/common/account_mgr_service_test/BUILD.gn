# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/test.gni")
import("../../../../../../os_account.gni")

module_output_path = "os_account/services/common"

config("bundle_manager_config") {
  include_dirs = [
    "${app_account_services_path}/test/mock/common",
    "${os_account_dfx_path}/hitrace_adapter",
  ]
}

bundle_manager_sources = [
  "${services_path}/accountmgr/test/mock/common/bundle_manager_adapter.cpp",
]

ohos_unittest("account_mgr_test") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  module_out_path = module_output_path
  cflags_cc = []
  include_dirs = [ "${account_iam_interfaces_native_path}/include" ]

  sources = [
    "${os_account_dfx_path}/hitrace_adapter/hitrace_adapter.cpp",
    "${services_path}/accountmgr/src/account_event_provider.cpp",
    "${services_path}/accountmgr/src/account_event_subscribe.cpp",
    "${services_path}/accountmgr/src/account_mgr_service.cpp",
    "${services_path}/accountmgr/src/distributed_account_subscribe_death_recipient.cpp",
    "${services_path}/accountmgr/src/distributed_account_subscribe_manager.cpp",
    "${services_path}/accountmgr/src/ohos_account_data_deal.cpp",
    "${services_path}/accountmgr/src/ohos_account_manager.cpp",
    "account_dump_helper_test.cpp",
    "account_mgr_service_test.cpp",
    "account_state_machine_test.cpp",
  ]

  sources += bundle_manager_sources

  configs = [
    ":bundle_manager_config",
    "${services_path}/accountmgr:accountmgr_config",
    "${services_path}/accountmgr/test:accountmgr_test_config",
    "${account_coverage_config_path}:coverage_flags",
  ]
  deps = [
    "${common_path}:libaccount_common",
    "${innerkits_native_path}:libaccountkits",
    "${os_account_innerkits_native_path}:os_account_innerkits",
    "${services_path}/accountmgr:accountmgr",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokenid_sdk",
    "bundle_framework:appexecfwk_base",
    "c_utils:utils",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "mbedtls:mbedtls_shared",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  if (has_user_idm_part) {
    cflags_cc += [ "-DHAS_USER_IDM_PART" ]
    external_deps += [ "user_auth_framework:userauth_client" ]
  }

  if (has_ces_part) {
    cflags_cc += [ "-DHAS_CES_PART" ]
    external_deps += [ "common_event_service:cesfwk_innerkits" ]
  }

  if (has_hiviewdfx_hisysevent_part) {
    cflags_cc += [ "-DHAS_HISYSEVENT_PART" ]
    external_deps += [ "hisysevent:libhisysevent" ]
  }

  if (has_user_auth_part) {
    cflags_cc += [ "-DHAS_USER_AUTH_PART" ]
  }

  if (has_hiviewdfx_hitrace_part) {
    external_deps += [ "hitrace:hitrace_meter" ]
    cflags_cc += [ "-DHAS_HITRACE_PART" ]
  }

  if (has_kv_store_part) {
    cflags_cc += [ "-DHAS_KV_STORE_PART" ]
  }

  if (os_account_enable_multiple_os_accounts || use_clang_coverage) {
    cflags_cc += [ "-DENABLE_MULTIPLE_OS_ACCOUNTS" ]
  }

  part_name = "os_account"
}

ohos_unittest("account_stub_test") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  module_out_path = module_output_path
  cflags_cc = []
  include_dirs = [
    "${os_account_interfaces_native_path}/include",
    "${os_account_core_path}/include",
    "${innerkits_native_path}/include",
    "${services_path}/accountmgr/include/bundle_manager_adapter",
    "${services_path}/accountmgr/include/bundle_manager_adapter",
    "${bundle_framework_path}/common/log/include",
    "${bundle_framework_path}/interfaces/inner_api/appexecfwk_core/include/bundlemgr",
  ]

  sources = [
    "${services_path}/accountmgr/src/account_stub.cpp",
    "account_stub_test.cpp",
  ]

  configs = [
    "${services_path}/accountmgr:bundle_manager_config",
    "${services_path}/accountmgr:accountmgr_config",
    "${services_path}/accountmgr/test:accountmgr_test_config",
    "${account_coverage_config_path}:coverage_flags",
  ]
  deps = [
    "${common_path}:libaccount_common",
    "${innerkits_native_path}:libaccountkits",
    "${services_path}/accountmgr:accountmgr",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

group("unittest") {
  testonly = true

  deps = [
    ":account_mgr_test",
    ":account_stub_test",
  ]
}
