# Copyright (c) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/test.gni")
import("../../../../../../os_account.gni")

module_output_path = "os_account/services/common"

config("accountmgr_event_provider_test_config") {
  include_dirs = [
    "./include",
    "${app_account_core_path}/include",
    "${app_account_interfaces_native_path}/include",
    "${common_path}/log/include",
    "${common_path}/perf_stat/include",
    "${innerkits_common}/include",
    "${domain_account_interfaces_native_path}/include",
    "${os_account_dfx_path}/hitrace_adapter",
    "${services_path}/accountmgr/include",
    "${innerkits_path}/include",
  ]
}

ohos_unittest("AccountEventProviderTest") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  module_out_path = module_output_path
  cflags_cc = []
  sources = [
    "${common_path}/log/src/account_log_wrapper.cpp",
    "${os_account_dfx_path}/hitrace_adapter/hitrace_adapter.cpp",
    "${services_path}/accountmgr/src/account_event_provider.cpp",
  ]
  sources += [ "account_event_provider_test.cpp" ]

  configs = [
    ":accountmgr_event_provider_test_config",
    "${services_path}/accountmgr/test:accountmgr_test_config",
    "${account_coverage_config_path}:coverage_flags",
  ]

  deps = [
    "${common_path}:libaccount_common",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]
  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_runtime:ability_manager",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  if (has_ces_part) {
    cflags_cc += [ "-DHAS_CES_PART" ]
    external_deps += [ "common_event_service:cesfwk_innerkits" ]
  }

  if (has_hiviewdfx_hisysevent_part) {
    cflags_cc += [ "-DHAS_HISYSEVENT_PART" ]
    external_deps += [ "hisysevent:libhisysevent" ]
  }

  if (has_hiviewdfx_hitrace_part) {
    external_deps += [ "hitrace:hitrace_meter" ]
    cflags_cc += [ "-DHAS_HITRACE_PART" ]
  }

  part_name = "os_account"
}

group("unittest") {
  testonly = true

  deps = [ ":AccountEventProviderTest" ]
}
