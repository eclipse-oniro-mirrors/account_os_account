# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../../../os_account.gni")

module_output_path = "os_account/frameworks/app_account"

config("app_account_interfaces_native_config_mock") {
  include_dirs = [ "${app_account_innerkits_native_path}/test/mock" ]
}

app_account_mock_sources = []

config("app_account_native_config_unittest") {
  visibility = [ ":*" ]

  include_dirs = [ "include" ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  defines = [
    "ACCOUNT_LOG_TAG = \"AppAccountUTestFwk\"",
    "LOG_DOMAIN = 0xD001B00",
  ]
}

ohos_unittest("app_account_manager_test") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  module_out_path = module_output_path

  sources = [ "app_account_manager_test.cpp" ]
  sources += app_account_mock_sources

  configs = [
    ":app_account_interfaces_native_config_mock",
    ":app_account_native_config_unittest",
    "${account_coverage_config_path}:coverage_flags",
  ]

  deps = [
    "${app_account_innerkits_native_path}:app_account_innerkits",
    "${common_path}:libaccount_common",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
  ]
}

ohos_unittest("app_account_manager_proxy_mock_test") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  module_out_path = module_output_path

  sources = [
    "${app_account_innerkits_native_path}/src/app_account_proxy.cpp",
    "app_account_manager_test.cpp",
  ]
  sources += app_account_mock_sources

  configs = [
    ":app_account_interfaces_native_config_mock",
    ":app_account_native_config_unittest",
    "${account_coverage_config_path}:coverage_flags",
  ]

  deps = [
    "${app_account_innerkits_native_path}:app_account_innerkits",
    "${app_account_services_path}:accountmgr",
    "${common_path}:libaccount_common",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "ability_runtime:app_manager",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
  ]
  cflags_cc = [ "-DPROXY_MOCK" ]
}

ohos_unittest("app_account_manager_subscribe_test") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  module_out_path = module_output_path

  sources = [ "app_account_manager_subscribe_test.cpp" ]
  sources += app_account_mock_sources

  configs = [
    ":app_account_interfaces_native_config_mock",
    ":app_account_native_config_unittest",
    "${account_coverage_config_path}:coverage_flags",
  ]

  deps = [
    "${app_account_innerkits_native_path}:app_account_innerkits",
    "${app_account_services_path}:accountmgr",
    "${app_account_services_path}/src/appaccount:app_account_service_core",
    "${common_path}:libaccount_common",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "bundle_framework:appexecfwk_base",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]
}

ohos_unittest("app_account_common_test") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  module_out_path = module_output_path

  sources = [ "app_account_common_test.cpp" ]
  sources += app_account_mock_sources

  configs = [
    ":app_account_interfaces_native_config_mock",
    ":app_account_native_config_unittest",
    "${account_coverage_config_path}:coverage_flags",
  ]

  deps = [
    "${app_account_innerkits_native_path}:app_account_innerkits",
    "${common_path}:libaccount_common",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
  ]
}

group("unittest") {
  testonly = true

  deps = [
    ":app_account_common_test",
    ":app_account_manager_subscribe_test",
    ":app_account_manager_test",
  ]
}
