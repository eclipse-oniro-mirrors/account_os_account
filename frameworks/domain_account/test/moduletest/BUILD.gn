# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../../services/accountmgr/os_account_service.gni")

module_output_path = "os_account/frameworks/domain_account"

config("domain_account_frameworks_config_moduletest") {
  visibility = [ ":*" ]

  include_dirs = [ "include" ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  defines = [
    "ACCOUNT_LOG_TAG = \"DomainAccountMTestFwk\"",
    "LOG_DOMAIN = 0xD001B00",
  ]
}

ohos_moduletest("domain_account_frameworks_module_test") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  module_out_path = module_output_path

  include_dirs = [
    "${services_path}/accountmgr/include",
    "${services_path}/accountmgr/include/account_iam",
    "${services_path}/accountmgr/include/domain_account",
    "${services_path}/accountmgr/include/osaccount",
  ]
  sources = [
    "${services_path}/accountmgr/src/domain_account/domain_account_plugin_proxy.cpp",
    "${services_path}/accountmgr/src/domain_account/inner_domain_account_manager.cpp",
    "src/domain_account_client_module_test.cpp",
    "src/mock_domain_auth_callback.cpp",
    "src/mock_domain_auth_callback_for_listener.cpp",
    "src/mock_domain_create_domain_account_callback.cpp",
    "src/mock_domain_get_access_token_callback.cpp",
    "src/mock_domain_has_domain_info_callback.cpp",
    "src/mock_domain_plugin.cpp",
  ]
  configs = [ ":domain_account_frameworks_config_moduletest" ]

  deps = [
    "${account_iam_framework_path}:account_iam_innerkits",
    "${common_path}:libaccount_common",
    "${domain_account_framework_path}:domain_account_innerkits",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "access_token:libaccesstoken_sdk",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "os_account:os_account_innerkits",
  ]

  cflags_cc = []

  if (has_user_auth_part) {
    cflags_cc += [ "-DHAS_USER_AUTH_PART" ]
    external_deps += [ "user_auth_framework:userauth_client" ]
  }
}

ohos_moduletest("domain_account_frameworks_module_mock_test") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${os_account_path}/cfi_blocklist.txt"
  }

  module_out_path = module_output_path
  cflags = [ "-pipe" ]

  include_dirs = [
    "${os_account_dfx_path}/hidumper_adapter",
    "${services_path}/accountmgr/include/bundle_manager_adapter",
    "${services_path}/accountmgr/include/ability_manager_adapter",
    "${services_path}/accountmgr/include",
    "${os_account_dfx_path}/hitrace_adapter",
    "${services_path}/accountmgr/include/account_iam",
    "${services_path}/accountmgr/include/domain_account",
    "${services_path}/accountmgr/include/osaccount",
    "${bundle_framework_path}/interfaces/inner_api/appexecfwk_core/include",
  ]
  sources = [
    "${app_account_services_path}/test/mock/common/ability_manager_adapter_mock.cpp",
    "${app_account_services_path}/test/mock/common/bundle_manager_adapter.cpp",
    "${os_account_dfx_path}/hidumper_adapter/account_dump_helper.cpp",
    "${os_account_dfx_path}/hitrace_adapter/hitrace_adapter.cpp",
    "${services_path}/accountmgr/src/account_iam/account_iam_callback.cpp",
    "${services_path}/accountmgr/src/account_iam/account_iam_mgr_stub.cpp",
    "${services_path}/accountmgr/src/account_iam/account_iam_service.cpp",
    "${services_path}/accountmgr/src/account_iam/inner_account_iam_manager.cpp",
    "src/domain_account_client_module_test.cpp",
    "src/mock_domain_auth_callback.cpp",
    "src/mock_domain_auth_callback_for_listener.cpp",
    "src/mock_domain_create_domain_account_callback.cpp",
    "src/mock_domain_get_access_token_callback.cpp",
    "src/mock_domain_has_domain_info_callback.cpp",
    "src/mock_domain_plugin.cpp",
  ]
  sources += account_service_sources
  configs = [ ":domain_account_frameworks_config_moduletest" ]

  deps = [
    "${account_iam_framework_path}:account_iam_innerkits",
    "${common_path}:libaccount_common",
    "${domain_account_framework_path}:domain_account_innerkits",
    "${innerkits_native_path}:libaccountkits",
    "${os_account_innerkits_native_path}:os_account_innerkits",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  use_exceptions = true

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_runtime:ability_manager",
    "ability_runtime:app_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libtoken_setproc",
    "access_token:libtokenid_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "hilog:libhilog",
    "huks:libhukssdk",
    "init:libbegetutil",
    "ipc:ipc_single",
    "mbedtls:mbedtls_shared",
    "os_account:os_account_innerkits",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  cflags_cc = []

  if (has_user_auth_part) {
    cflags_cc += [ "-DHAS_USER_AUTH_PART" ]
    external_deps += [ "user_auth_framework:userauth_client" ]
  }
  if (has_ces_part) {
    cflags_cc += [ "-DHAS_CES_PART" ]
    external_deps += [ "common_event_service:cesfwk_innerkits" ]
  }
  cflags_cc += [ "-DACCOUNT_TEST" ]
  cflags_cc += [ "-DBUNDLE_ADAPTER_MOCK" ]
  if (os_account_enable_multiple_os_accounts || use_clang_coverage) {
    cflags_cc += [ "-DENABLE_MULTIPLE_OS_ACCOUNTS" ]
  }
}

ohos_moduletest("domain_account_client_mock_plugin_so_module_test") {
  module_out_path = module_output_path
  cflags = [ "-pipe" ]

  include_dirs = [
    "${os_account_dfx_path}/hidumper_adapter",
    "${services_path}/accountmgr/include/bundle_manager_adapter",
    "${services_path}/accountmgr/include/ability_manager_adapter",
    "${services_path}/accountmgr/include",
    "${os_account_dfx_path}/hitrace_adapter",
    "${services_path}/accountmgr/include/account_iam",
    "${services_path}/accountmgr/include/domain_account",
    "${services_path}/accountmgr/include/osaccount",
    "${bundle_framework_path}/interfaces/inner_api/appexecfwk_core/include",
  ]
  sources = [
    "${app_account_services_path}/test/mock/common/ability_manager_adapter_mock.cpp",
    "${app_account_services_path}/test/mock/common/bundle_manager_adapter.cpp",
    "${os_account_dfx_path}/hidumper_adapter/account_dump_helper.cpp",
    "${os_account_dfx_path}/hitrace_adapter/hitrace_adapter.cpp",
    "${services_path}/accountmgr/src/account_iam/account_iam_callback.cpp",
    "${services_path}/accountmgr/src/account_iam/account_iam_mgr_stub.cpp",
    "${services_path}/accountmgr/src/account_iam/account_iam_service.cpp",
    "${services_path}/accountmgr/src/account_iam/inner_account_iam_manager.cpp",
    "src/domain_account_client_mock_plugin_so_module_test.cpp",
    "src/mock_domain_get_access_token_callback.cpp",
    "src/mock_domain_has_domain_info_callback.cpp",
    "src/mock_domain_so_plugin.cpp",
  ]
  sources += account_service_sources
  configs = [ ":domain_account_frameworks_config_moduletest" ]

  deps = [
    "${account_iam_framework_path}:account_iam_innerkits",
    "${common_path}:libaccount_common",
    "${domain_account_framework_path}:domain_account_innerkits",
    "${innerkits_native_path}:libaccountkits",
    "${os_account_innerkits_native_path}:os_account_innerkits",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  use_exceptions = true

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_runtime:ability_manager",
    "ability_runtime:app_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "access_token:libtoken_setproc",
    "access_token:libtokenid_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "hilog:libhilog",
    "huks:libhukssdk",
    "init:libbegetutil",
    "ipc:ipc_single",
    "mbedtls:mbedtls_shared",
    "os_account:os_account_innerkits",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  cflags_cc = []

  if (has_user_auth_part) {
    cflags_cc += [ "-DHAS_USER_AUTH_PART" ]
    external_deps += [ "user_auth_framework:userauth_client" ]
  }
  if (has_ces_part) {
    cflags_cc += [ "-DHAS_CES_PART" ]
    external_deps += [ "common_event_service:cesfwk_innerkits" ]
  }
  cflags_cc += [ "-DACCOUNT_TEST" ]
  cflags_cc += [ "-DBUNDLE_ADAPTER_MOCK" ]
  if (os_account_enable_multiple_os_accounts || use_clang_coverage) {
    cflags_cc += [ "-DENABLE_MULTIPLE_OS_ACCOUNTS" ]
  }
}

ohos_moduletest("domain_account_common_module_test") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  module_out_path = module_output_path

  include_dirs = [ "${domain_account_interfaces_native_path}/include" ]
  sources = [ "src/domain_account_common_test.cpp" ]
  configs = [ ":domain_account_frameworks_config_moduletest" ]

  deps = [
    "${common_path}:libaccount_common",
    "${domain_account_framework_path}:domain_account_innerkits",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "os_account:os_account_innerkits",
  ]
}

ohos_moduletest("domain_account_plugin_service_test") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  module_out_path = module_output_path

  include_dirs = [ "${domain_account_interfaces_native_path}/include" ]
  sources = [
    "src/domain_account_plugin_service_test.cpp",
    "src/mock_domain_plugin.cpp",
  ]
  configs = [ ":domain_account_frameworks_config_moduletest" ]

  deps = [
    "${common_path}:libaccount_common",
    "${domain_account_framework_path}:domain_account_innerkits",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "os_account:os_account_innerkits",
  ]
}

ohos_moduletest("domain_account_plugin_stub_test") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  module_out_path = module_output_path

  include_dirs = [ "${domain_account_interfaces_native_path}/include" ]
  sources = [ "src/domain_account_plugin_stub_test.cpp" ]
  configs = [ ":domain_account_frameworks_config_moduletest" ]

  deps = [
    "${common_path}:libaccount_common",
    "${domain_account_framework_path}:domain_account_innerkits",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "os_account:os_account_innerkits",
  ]
}

group("moduletest") {
  testonly = true

  deps = [
    ":domain_account_client_mock_plugin_so_module_test",
    ":domain_account_common_module_test",
    ":domain_account_frameworks_module_mock_test",
    ":domain_account_plugin_service_test",
    ":domain_account_plugin_stub_test",
  ]
}
