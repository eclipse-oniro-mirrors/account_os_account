# Copyright (c) 2022-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/components/idl_tool/idl.gni")
import("//build/ohos.gni")
import("../../os_account.gni")

idl_gen_interface("frameworks_domain_account_interface") {
  sources = [
    "IDomainAccount.idl",
    "IDomainAccountCallback.idl",
    "IDomainAccountPlugin.idl",
  ]
  log_domainid = "0xD001B00"
  log_tag = "DomainAccountFwk"
  subsystem_name = "account"
  part_name = "os_account"
}

config("frameworks_domain_account_interface_public_config") {
  include_dirs = [ "${target_gen_dir}" ]
}

config("domain_account_innnerkits_config") {
  visibility = [ ":*" ]

  cflags = []
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  cflags += [ "-pipe" ]
  cflags_cc = [
    "-Wdate-time",
    "-Wformat=2",
    "-Wfloat-equal",
    "-Wshadow",
  ]

  if (os_account_support_domain_accounts) {
    cflags_cc += [ "-DSUPPORT_DOMAIN_ACCOUNTS" ]
  }

  defines = [
    "ACCOUNT_LOG_TAG = \"DomainAccountFwk\"",
    "LOG_DOMAIN = 0xD001B00",
  ]
}

config("domain_account_innerkits_public_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "include",
    "${common_path}/include",
    "${domain_account_interfaces_native_path}/include",
    "${common_path}/utils/include",
    "${innerkits_common}/include",
    "${target_gen_dir}",
  ]
}

ohos_shared_library("domain_account_innerkits") {
  branch_protector_ret = "pac_ret"

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [
    "src/domain_account_callback_service.cpp",
    "src/domain_account_client.cpp",
    "src/domain_account_common.cpp",
    "src/domain_account_parcel.cpp",
  ]
  output_values = get_target_outputs(":frameworks_domain_account_interface")
  sources += filter_include(output_values,
                            [
                              "*domain_account_callback_proxy.cpp",
                              "*domain_account_callback_stub.cpp",
                            ])

  if (os_account_support_domain_accounts) {
    sources += [
      "src/domain_account_callback_adapters.cpp",
      "src/domain_account_callback_client.cpp",
      "src/domain_account_plugin_service.cpp",
      "src/domain_account_status_listener_manager.cpp",
    ]
    sources += filter_include(output_values,
                              [
                                "*domain_account_plugin_stub.cpp",
                                "*domain_account_proxy.cpp",
                              ])
  }

  configs = [ ":domain_account_innnerkits_config" ]

  public_configs = [ ":domain_account_innerkits_public_config" ]

  deps = [
    ":frameworks_domain_account_interface",
    "${common_path}:libaccount_common",
    "${innerkits_native_path}:libaccountkits",
  ]

  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]

  innerapi_tags = [ "platformsdk" ]
  subsystem_name = "account"
  part_name = "os_account"
}

ohos_source_set("domain_account_callback_proxy") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  configs = [ ":domain_account_innnerkits_config" ]
  public_configs = [ ":domain_account_innerkits_public_config" ]
  output_values = get_target_outputs(":frameworks_domain_account_interface")
  sources = filter_include(output_values, [ "*domain_account_callback_proxy.cpp" ])
  deps = [ ":frameworks_domain_account_interface" ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
  ]
  subsystem_name = "account"
  part_name = "os_account"
}

ohos_source_set("domain_account_callback_stub") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  configs = [ ":domain_account_innnerkits_config" ]
  public_configs = [ ":domain_account_innerkits_public_config" ]
  output_values = get_target_outputs(":frameworks_domain_account_interface")
  sources =
      filter_include(output_values, [ "*domain_account_callback_stub.cpp" ])
  deps = [ ":frameworks_domain_account_interface" ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
  ]
  subsystem_name = "account"
  part_name = "os_account"
}

ohos_source_set("domain_account_plugin_proxy") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  configs = [ ":domain_account_innnerkits_config" ]
  public_configs = [ ":domain_account_innerkits_public_config" ]
  output_values = get_target_outputs(":frameworks_domain_account_interface")
  sources =
      filter_include(output_values, [ "*domain_account_plugin_proxy.cpp" ])
  deps = [ ":frameworks_domain_account_interface" ]
  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
  ]
  subsystem_name = "account"
  part_name = "os_account"
}

ohos_source_set("domain_account_plugin_stub") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  configs = [ ":domain_account_innnerkits_config" ]
  public_configs = [ ":domain_account_innerkits_public_config" ]
  output_values = get_target_outputs(":frameworks_domain_account_interface")
  sources = filter_include(output_values, [ "*domain_account_plugin_stub.cpp" ])
  deps = [ ":frameworks_domain_account_interface" ]
  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
  ]
  subsystem_name = "account"
  part_name = "os_account"
}

ohos_source_set("domain_account_proxy") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  configs = [ ":domain_account_innnerkits_config" ]
  public_configs = [ ":domain_account_innerkits_public_config" ]
  output_values = get_target_outputs(":frameworks_domain_account_interface")
  sources = filter_include(output_values, [ "*domain_account_proxy.cpp" ])
  deps = [ ":frameworks_domain_account_interface" ]
  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
  ]
  subsystem_name = "account"
  part_name = "os_account"
}

ohos_source_set("domain_account_stub") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  configs = [ ":domain_account_innnerkits_config" ]
  public_configs = [ ":domain_account_innerkits_public_config" ]
  output_values = get_target_outputs(":frameworks_domain_account_interface")
  sources = filter_include(output_values, [ "*domain_account_stub.cpp" ])
  deps = [ ":frameworks_domain_account_interface" ]
  external_deps = [
    "ability_base:want",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
  ]
  subsystem_name = "account"
  part_name = "os_account"
}
