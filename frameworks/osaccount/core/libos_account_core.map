# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

1.0 {
  global:
    extern "C++" {
        "OHOS::AccountSA::OsAccountInfo::OsAccountInfo()";
        "OHOS::AccountSA::OsAccount::CreateOsAccount(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, OHOS::AccountSA::OsAccountType const&, OHOS::AccountSA::OsAccountInfo&)";
        "OHOS::AccountSA::OsAccount::CreateOsAccount(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, OHOS::AccountSA::OsAccountType const&, OHOS::AccountSA::OsAccountInfo&, OHOS::AccountSA::CreateOsAccountOptions const&)";
        "OHOS::AccountSA::OsAccount::GetInstance()";
        "OHOS::AccountSA::OsAccount::RemoveOsAccount(int)";
        "OHOS::AccountSA::OsAccount::DumpState(int const&, std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>>>&)";
        "OHOS::AccountSA::OsAccount::SetOsAccountConstraints(int, std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>>> const&, bool)";
        "OHOS::AccountSA::OsAccount::ActivateOsAccount(int)";
        "OHOS::AccountSA::OsAccount::DeactivateOsAccount(int)";
        "OHOS::AccountSA::OsAccount::DeactivateAllOsAccounts()";
        "VTT for OHOS::AccountSA::OsAccountInfo";
        "VTT for OHOS::AccountSA::CreateOsAccountOptions";
        "vtable for OHOS::AccountSA::CreateOsAccountOptions";
        "OHOS::AccountSA::OsAccountEventListener::OsAccountEventListener(std::__h::shared_ptr<OHOS::AccountSA::OsAccountSubscriber> const&)";
    };
  local:
    *;
};