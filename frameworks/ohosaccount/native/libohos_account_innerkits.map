# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

1.0 {
  global:
    extern "C++" {
        "VTT for OHOS::AccountSA::AccountProxy";
        "vtable for OHOS::AccountSA::AccountProxy";
        "OHOS::AccountSA::OhosAccountKitsImpl::GetInstance()";
        "OHOS::AccountSA::OhosAccountKits::GetInstance()";
        "OHOS::AccountSA::OhosAccountKitsImpl::GetDomainAccountService()";
        "OHOS::AccountSA::OhosAccountKitsImpl::GetAppAccountService()";
        "OHOS::AccountSA::OhosAccountKitsImpl::GetOsAccountService()";
        "OHOS::AccountSA::OhosAccountKitsImpl::GetAccountIAMService()";
        "OHOS::AccountSA::WriteOhosAccountInfo(OHOS::MessageParcel&, OHOS::AccountSA::OhosAccountInfo const&)";
        "OHOS::AccountSA::ReadOhosAccountInfo(OHOS::MessageParcel&, OHOS::AccountSA::OhosAccountInfo&)";
        "OHOS::AccountSA::SystemAbilityStatusChangeListener::SystemAbilityStatusChangeListener(std::__h::function<void (int, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>)> const&)";
        "OHOS::AccountSA::OhosAccountKitsImpl::SubscribeSystemAbility(std::__h::function<void (int, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>)> const&)";
        "VTT for OHOS::AccountSA::DistributedAccountEventData";
        "vtable for OHOS::AccountSA::DistributedAccountEventData";
        "OHOS::AccountSA::DistributedAccountEventService::IsTypeExist(OHOS::AccountSA::DISTRIBUTED_ACCOUNT_SUBSCRIBE_TYPE)";
        "OHOS::AccountSA::DistributedAccountEventService::DeleteType(OHOS::AccountSA::DISTRIBUTED_ACCOUNT_SUBSCRIBE_TYPE)";
        "OHOS::AccountSA::DistributedAccountEventService::GetTypeSize()";
        "OHOS::AccountSA::DistributedAccountEventService::GetAllType(std::__h::vector<OHOS::AccountSA::DISTRIBUTED_ACCOUNT_SUBSCRIBE_TYPE, std::__h::allocator<OHOS::AccountSA::DISTRIBUTED_ACCOUNT_SUBSCRIBE_TYPE>>&)";
        "OHOS::AccountSA::DistributedAccountEventService::DistributedAccountEventService(OHOS::AccountSA::DISTRIBUTED_ACCOUNT_SUBSCRIBE_TYPE, std::__h::shared_ptr<OHOS::AccountSA::DistributedAccountSubscribeCallback> const&)";
        "OHOS::AccountSA::DistributedAccountEventService::AddType(OHOS::AccountSA::DISTRIBUTED_ACCOUNT_SUBSCRIBE_TYPE)";
        "OHOS::AccountSA::DistributedAccountEventData::operator==(OHOS::AccountSA::DistributedAccountEventData const&) const";
    };
  local:
    *;
};